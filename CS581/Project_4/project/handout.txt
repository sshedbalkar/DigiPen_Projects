High-level overview of the assignment:
your program has to read a file describing a minesweeper field 
(I'll provide this code)

1) base - required:
create a class Analyzer.
Constructor of the class should except a (non-const!) reference to MSfieldPart1 object
implement 2 methods:
bool Analyzer::IsMine(int x, int y);
bool Analyzer::IsSafe(int x, int y);
the return value has the following meaning:
if ( Analyzer::IsMine(3,4) ) {
	//location 3 4 has a mine
} else {
	//it is impossible to prove 3 4 has a mine !!!!
}

if ( Analyzer::IsSafe(3,4) ) {
	//location 3 4 is Safe
} else {
	//it is impossible to prove 3 4 is safe!!!!
}

notice that the 2 function ARE NOT opposites of each other
        
IsMine IsSafe 
  0      0     undecidable this location may be either mine or safe
  1      0     location is a mine
  0      1     location is safe
  1      1     impossible - you have a bug

Idea:
you should use proof by contradiction: the very first step of IsMine(x,y) is
to assume the opposite - (x,y) is safe. Then apply rules 1,2,3 till 
you find a contradiction - rules 4,5. This proves (x,y) is a mine.
	or
no rule is applicable (and there is no contradiction). Proof has failed.

To compile and run:
make driver1
./driver1.exe

Note: I use the following fields in part 1 (loaded by driver):
field1  field2  field3  field4  field5


2) extra credit (25%)
implement the whole gameplay - that is if location is safe, you open it 
(step on it - use OpenLocation(...) make sure you understand this function) 
and MSfieldPart2 will return a number of mines around it. If you try to open a
location with a mine in it you bust_counter will be incremented.  This part
will require guessing - unlike 1) where we only deal with guaranteed facts. It
is possible to implement "educated" guesses, but do not do it for this
assignment - they require probability theory.  Implement Solver by subclassing 
Analyzer.
Solver constructor should except a (non-const) reference to MSfieldPart2.

void Solver::Solve(); 
should open ALL safe locations and mark ALL mines with the minimal number
of busts.

To compile and run:
make driver2
./driver2.exe

Note: I use the following fields in part 2 (loaded by driver):
field2_part2  field4_part2  field6_part2  field_part2 


There is another driver for part2 that takes an argument - filename with field description:

make driver3
./driver3 <filename>

Note that field has to be valid - the numbers should correspond to the actual mines. 
For example:
+-----+
| M M |
|M242 |
| M M |
+-----+
is illegal, cell marked with 2 sees 3 mines. Such illegal input will produce garbage results.

Note that fields from part1 are illegal in part2, example
+---------+
|121212121|
|         |
+---------+
but there are no mines, so all 1's and 2's are illegal.


3) extra credit (up to 50% - depends on the quality)
optimize Solver so that you can solve regular expert field 30x16 with 99 mines
in less then 10 sec. Use generate-field.cpp to generate fields in the proper format.
For example:
g++ generate-field.cpp -o gen.exe
./gen.exe > out
./driver3.exe out
run the above pair 100 times.
I expect 5-7 busts on each field, no more.

================================================================
Example fields:
+---------+
|121212121|
|         |
+---------+

numbers specify the count of mines around the location

in some cases fields will contain extra information - some mines will be 
given as already known to the AI
+-----+
| 01 1|
| 0111|
| 0 m |
+-----+

For the complete gameplay extra credit we'll use 2 kinds of mines
m - known to AI and driver
M - known to driver only (driver has to know all mines)
+-----+
| M2M |
|  3  |
|m2m2m|
+-----+
or without any info (M's are mines unknown to the player)
+-----+
| M M |
|     |
|M M M|
+-----+

========================================================
Here is an example of solving minesweeper field (part 1))
Original question is from Richard Kaye

+----------------->    x-axis
|2 3 - 2 2 - 2 1
|- - 4 - - 4 - 2 
|- ? - - - - 4 - 
|- 5 - 6 - - - 2
|2 - - - 5 5 - 2
|1 3 4 - - - 4 - 
|0 1 - 4 - - - 3
|0 1 2 - 2 3 - 2
V
y-axis

is (1,2) safe or a mine?
location is marked with "?"
"-" means unknown content (I call it "unknown location").

coordinates are 
(top,left)=(0,0) 
x-axis is horisontal
===================================================
I'll use the following notations:
for a location X:
KM(X) - number of known adjacent mines (neighbors that are marked as mines by the player)
UL(X) - set of unknown locations (neighbors that are not assigned either safe 
		or mine)
Val(X) - if the cell was is open, then Val(X) is the number of all adjacent mines,
	even those that are not discovered yet.
  0 1 2
 +-----
0|m m -
1|m 5 -
2|- - -

X=(1,1)
KM(X) = 3
UL(X) = { (0,0), (1,0), (2,0), (2,1), (2,2) }
===================================================
Rule 1:
======
if some location X satisfies
Val(X) - KM(X) = | UL(X) |
where |.| is the cardinality - number of elements in the set
then all locations in UL(X) are mines

Rule 2:
======
if some location X satisfies
Val(X) = KM(X) 
then all locations in UL(X) are safe

Here are some trivial mines which you can get by Rules 1 and 2:

  0 1 2 3 4 5 6 7
 +---------------
0|2 3 m 2 2 m 2 1
1|m m 4 - - 4 m 2 
2|- - - - - - 4 m 
3|m 5 - 6 - - - 2
4|2 m m - 5 5 - 2
5|1 3 4 - - - 4 m 
6|0 1 m 4 - - m 3
7|0 1 2 m 2 3 m 2
===================================================

Rule 3:
======
if for 2 locations X and Y:
(Val(X) - KM(X) ) - ( Val(Y) - KM(Y) ) = | UL(X) \ UL(Y) |
where "\" is set difference
then
A) all locations in UL(X)\UL(Y) are mines
B) all locations in UL(Y)\UL(X) are safe

Here are some non-trivial mines which you can get by applying Rule 3:
X=(4,4)
Val(X)=5
KM(X) = 0
UL(X) = { (3,4)  (3,5)  (4,3)  (4,5)  (5,3)  (5,5)  }
Y=(2,5)
Val(Y)=4
KM(Y) = 3
UL(Y) = { (3,4)  (3,5) }

(Val(X) - KM(X) ) - ( Val(Y) - KM(Y) ) = (5-0) - (4-3) = 4
UL(X) \ UL(Y) = { (4,3)  (4,5)  (5,3)  (5,5) }
| UL(X) \ UL(Y) | = 4
so
UL(X) \ UL(Y) = { (4,3)  (4,5)  (5,3)  (5,5) } are mines
UL(Y) \ UL(X) = {} empty set, are safe 

  0 1 2 3 4 5 6 7
 +---------------
0|2 3 m 2 2 m 2 1
1|m m 4 - - 4 m 2 
2|- - - - - - 4 m 
3|m 5 - 6 * * - 2
4|2 m m - 5 5 - 2
5|1 3 4 - * * 4 m 
6|0 1 m 4 - - m 3
7|0 1 2 m 2 3 m 2

I marked the 4 new mines with "*"

===================================================

There is nothing else we can do using Rules 1,2,3, 
unless we use "proof by contradiction"!!!

Remember the original question - is (1,2) safe.
Let's assume it's not - so that it's a mine.

  0 1 2 3 4 5 6 7
 +---------------
0|2 3 m 2 2 m 2 1
1|m m 4 - - 4 m 2 
2|- * - - - - 4 m 
3|m 5 - 6 m m - 2
4|2 m m - 5 5 - 2
5|1 3 4 - m m 4 m 
6|0 1 m 4 - - m 3
7|0 1 2 m 2 3 m 2
I marked the new mine with "*"
===================================================

Same way we do it in FOL resolution, let's apply rules and see if we can
get a contradiction.

First apply Rule 3 to 
X=(3,3)
Y=(1,3)

Val(X)=6
Val(Y)=5

Val(X)-KM(X)=4
Val(Y)-KM(Y)=1

UL(X) = UL(3,3) =  { (2,2)  (2,3)  (3,2)  (3,4)  (4,2)  } 
UL(Y) = UL(1,3) =  { (0,2)  (2,2)  (2,3)  } 
| UL(X) | = 5
| UL(Y) | = 3


UL(X)-UL(Y) = { (3,2)  (3,4)  (4,2) }
UL(Y)-UL(X) = { (0,2) }

(Val(X)-KM(X)) - (Val(Y)-KM(Y)) = | UL(X)-UL(Y) |
    4          1             3
so  UL(Y)-UL(X) are safe { (0,2) }
and UL(X)-UL(Y) are mines { (3,2)  (3,4)  (4,2) }

  0 1 2 3 4 5 6 7
 +---------------
0|2 3 m 2 2 m 2 1
1|m m 4 - - 4 m 2 
2|S m - * * * 4 m 
3|m 5 - 6 m m - 2
4|2 m m - 5 5 - 2
5|1 3 4 - m m 4 m 
6|0 1 m 4 - - m 3
7|0 1 2 m 2 3 m 2
new safe is marked as S
new mines are *'s
===================================================

Now apply Rules 1 and 2 (simple counting)

  0 1 2 3 4 5 6 7
 +---------------
0|2 3 m 2 2 m 2 1
1|m m 4 * S 4 m 2 
2|s m - m m m 4 m 
3|m 5 - 6 m m S 2
4|2 m m - 5 5 * 2
5|1 3 4 - m m 4 m 
6|0 1 m 4 - - m 3
7|0 1 2 m 2 3 m 2
new safe is marked as S
new mines are *'s

Now notice a contradiction:
it happened at (1,1) - location is marked with 4, but 
we have 5 mines already.

This contradiction proves that (1,2) was erroneously marked
as a mine, which means it's safe.
===================================================

Contradiction rules:

Rule 4 (too many mines):
======
Val(X) < KM(X) then assignment is impossible

Rule 5 (not enough mines):
======
Val(X) > KM(X) + | UL(X) | then assignment is impossible


===================================================
Above is the "manual" solution, where the best choices are made.
To see the above example solved "automatically" see example.from.handout.txt 
===================================================
===================================================
===================================================
example fields for part 1)

TRIVIAL

+---+
|   |
| 1 |
|  m|
+---+
all locations may be figured
+---+
|sss|
|s1s|
|ssm|
+---+


+---+
|   |
| 2 |
|m m|
+---+
all locations may be figured
+---+
|sss|
|s2s|
|msm|
+---+


LESS TRIVIAL
+---------+
|121212121|
|         |
+---------+
all locations may be figured
+---------+
|121212121|
|msmsmsmsm|
+---------+

INTERESTING
+-----+
|     |
| 242 |
|     |
+-----+
all locations may be figured
+-----+
|smsms|
|s242s|
|smsms|
+-----+

+-----+
|     |
| 121 |
|     |
+-----+
it's possible to figure 
+-----+
|s s s|
|s121s|
|s s s|
+-----+


+-----+
|     |
|1 23 |
|     |
+-----+
it's possible to figure 
+-----+
| s  s|
|1s23s|
| s  s|
+-----+



+-----+
|     |
|m342 |
|     |
+-----+
all locations may be figured
+-----+
|smsms|
|m342s|
|smsms|
+-----+


+---+
|1  |
| 32|
|1  |
+---+
all locations may be figured
+---+
|1sm|
|m32|
|1sm|
+---+

+--------+
|23 22 21|
|  4  4 2| 
|      4 | 
| 5 6   2|
|2   55 2|
|134   4 | 
|01 4   3|
|012 23 2|
+--------+
it's possible to figure 
+--------+
|23m22m21|
|mm4  4m2| 
| s    4m| 
|m5 6mm 2|
|2m  55 2|
|134 mm4m| 
|01m4  m3|
|012m23m2|
+--------+

============================================================
Algorithm for part 1:
both IsMine and IsSafe use the same algorithm - just the first step is different
1) assume the contrary - use temporary MS field.
2) apply rules 1,2,3 
3) try to detect contradiction, otherwise goto step 2)

note that part 1 should not modify field variable.
============================================================
Submit:
=======
analyzer.h
analyzer.cpp
